$date
	Sun Nov 11 23:45:13 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module instruction_decoder_test $end
$var wire 26 ! target_instr [25:0] $end
$var wire 5 " rt [4:0] $end
$var wire 5 # rs [4:0] $end
$var wire 1 $ regWr $end
$var wire 1 % regDst $end
$var wire 5 & rd [4:0] $end
$var wire 1 ' memWr $end
$var wire 1 ( memToReg $end
$var wire 1 ) jump $end
$var wire 16 * imm16 [15:0] $end
$var wire 1 + branch $end
$var wire 1 , ALUsrc $end
$var wire 3 - ALUcntrl [2:0] $end
$var reg 32 . inst [31:0] $end
$scope module decody $end
$var wire 32 / inst [31:0] $end
$var wire 26 0 target_instr [25:0] $end
$var wire 5 1 shamt [4:0] $end
$var wire 5 2 rt [4:0] $end
$var wire 5 3 rs [4:0] $end
$var wire 5 4 rd [4:0] $end
$var wire 6 5 op [5:0] $end
$var wire 16 6 imm16 [15:0] $end
$var wire 6 7 funct [5:0] $end
$var reg 3 8 ALUcntrl [2:0] $end
$var reg 1 , ALUsrc $end
$var reg 1 + branch $end
$var reg 1 ) jump $end
$var reg 1 ( memToReg $end
$var reg 1 ' memWr $end
$var reg 1 % regDst $end
$var reg 1 $ regWr $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 8
b111111 7
b1111111111111111 6
b100011 5
b11111 4
b10101 3
b1010 2
b11111 1
b10101010101111111111111111 0
b10001110101010101111111111111111 /
b10001110101010101111111111111111 .
b0 -
1,
0+
b1111111111111111 *
1)
1(
0'
b11111 &
0%
1$
b10101 #
b1010 "
b10101010101111111111111111 !
$end
#100
1'
0$
0(
b101011 5
b10101110101010101111111111111111 .
b10101110101010101111111111111111 /
#200
0'
0,
0)
b10 5
b11111 #
b11111 3
b11111 "
b11111 2
b11111111111111111111111111 !
b11111111111111111111111111 0
b1011111111111111111111111111 .
b1011111111111111111111111111 /
#300
1%
b0 5
b1000 7
b10101 #
b10101 3
b1010 "
b1010 2
b10101 &
b10101 4
b1010111111001000 *
b1010111111001000 6
b10101010101010111111001000 !
b10101010101010111111001000 0
b10101010101010111111001000 .
b10101010101010111111001000 /
#400
0%
1$
b11 5
b111111 7
b11111 #
b11111 3
b11111 "
b11111 2
b11111 &
b11111 4
b1111111111111111 *
b1111111111111111 6
b11111111111111111111111111 !
b11111111111111111111111111 0
b1111111111111111111111111111 .
b1111111111111111111111111111 /
#500
0$
b11 -
b11 8
1,
1)
1+
b100 5
b10101 #
b10101 3
b1010 "
b1010 2
b10101010101111111111111111 !
b10101010101111111111111111 0
b10010101010101111111111111111 .
b10010101010101111111111111111 /
#600
b101 5
b10110101010101111111111111111 .
b10110101010101111111111111111 /
#700
1$
0+
b1110 5
b111010101010101111111111111111 .
b111010101010101111111111111111 /
#800
b0 -
b0 8
b1000 5
b100010101010101111111111111111 .
b100010101010101111111111111111 /
#900
1%
b1 -
b1 8
0,
b0 5
b100010 7
b10101 &
b10101 4
b1010111111100010 *
b1010111111100010 6
b10101010101010111111100010 !
b10101010101010111111100010 0
b10101010101010111111100010 .
b10101010101010111111100010 /
#1000
b0 -
b0 8
b100000 7
b1010111111100000 *
b1010111111100000 6
b10101010101010111111100000 !
b10101010101010111111100000 0
b10101010101010111111100000 .
b10101010101010111111100000 /
#1100
b10 -
b10 8
b101010 7
b1010111111101010 *
b1010111111101010 6
b10101010101010111111101010 !
b10101010101010111111101010 0
b10101010101010111111101010 .
b10101010101010111111101010 /
#1200
